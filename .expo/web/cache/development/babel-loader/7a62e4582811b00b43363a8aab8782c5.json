{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, getNextHandlerTag } from \"./handlersRegistry\";\nimport { filterConfig, findNodeHandle } from \"./gestureHandlerCommon\";\nvar UIManagerAny = UIManager;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n    oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n    _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n    oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\n\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n      _ref$allowedProps = _ref.allowedProps,\n      allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {} : _ref$config,\n      transformProps = _ref.transformProps,\n      _ref$customNativeProp = _ref.customNativeProps,\n      customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"inspectorToggleListener\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n\n      _this.handlerTag = getNextHandlerTag();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n\n            _this2.update();\n          });\n        }\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n            onGestureEvent = _this$props5.onGestureEvent,\n            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n            onHandlerStateChange = _this$props6.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"mappings":"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","names":["React","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}