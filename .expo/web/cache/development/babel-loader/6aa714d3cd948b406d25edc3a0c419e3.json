{"ast":null,"code":"import { useSharedValue } from \"react-native-reanimated\";\nexport var useVector = function useVector() {\n  var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y1 = arguments.length > 1 ? arguments[1] : undefined;\n  var x = useSharedValue(x1);\n  var y = useSharedValue(y1 != null ? y1 : x1);\n  return {\n    x: x,\n    y: y\n  };\n};\nexport var vec2 = function () {\n  var _f = function _f(x, y) {\n    var _ref;\n\n    return {\n      x: x != null ? x : 0,\n      y: (_ref = y != null ? y : x) != null ? _ref : 0\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function vec2(x,y){var _ref;return{x:x!=null?x:0,y:(_ref=y!=null?y:x)!=null?_ref:0};}\";\n  _f.__workletHash = 6645977179329;\n  _f.__location = \"C:\\\\Users\\\\MENO\\\\Desktop\\\\PROJECT\\\\APP-DECO-COLOR\\\\deco-color-driver\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Vectors.js (1:306)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var vec = {\n  create: vec2\n};","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,yBAA/B;AAkBA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAGkB;EAAA,IAFzCC,EAEyC,uEAFpC,CAEoC;EAAA,IADzCC,EACyC;EACzC,IAAMC,CAAC,GAAGJ,cAAc,CAACE,EAAD,CAAxB;EACA,IAAMG,CAAC,GAAGL,cAAc,CAACG,EAAD,QAACA,QAAMD,EAAP,CAAxB;EACA,OAAO;IAAEE,CAAC,EAADA,CAAF;IAAKC,CAAC,EAADA;EAAL,CAAP;AANK;AAoBP,OAAO,IAAMC,IAAY;EAAA,qBACvBF,CADuB,EAEvBC,CAFuB,EAGpB;IAAA;;IAEH,OAAO;MACLD,CAAC,EAAEA,CAAF,QAAEA,OAAK,CADH;MAELC,CAAC,UAAEA,CAAF,QAAEA,OAAKD,CAAP,mBAAY;IAFR,CAAP;EALK,CAAkB;;EAAA;EAAA;EAAA;EAAA;;EAAA;;EAAA;AAAA,GAAlB;AAWP,OAAO,IAAMG,GAAG,GAAG;EACjBC,MAAM,EAAEF;AADS,CAAZ","names":["useSharedValue","useVector","x1","y1","x","y","vec2","vec","create"],"sources":["Vectors.ts"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\n/**\n * @summary Type representing a vector\n * @example\n   export interface Vector<T = number> {\n    x: T;\n    y: T;\n  }\n */\nexport interface Vector<T = number> {\n  x: T;\n  y: T;\n}\n\n/**\n * @summary Returns a vector of shared values\n */\nexport const useVector = (\n  x1 = 0,\n  y1?: number\n): Vector<Animated.SharedValue<number>> => {\n  const x = useSharedValue(x1);\n  const y = useSharedValue(y1 ?? x1);\n  return { x, y };\n};\n\ntype Create = {\n  (): Vector<0>;\n  <T extends Animated.Adaptable<number>>(x: T, y?: T): Vector<T>;\n};\n\n/**\n *\n * @param x\n * @param y\n * @worklet\n */\nexport const vec2: Create = <T extends Animated.Adaptable<number>>(\n  x?: T,\n  y?: T\n) => {\n  \"worklet\";\n  return {\n    x: x ?? 0,\n    y: y ?? x ?? 0,\n  };\n};\n\nexport const vec = {\n  create: vec2,\n};\n"]},"metadata":{},"sourceType":"module"}